<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vigneswar on ByteTheCookies</title>
    <link>http://localhost:1313/tags/vigneswar/</link>
    <description>Recent content in Vigneswar on ByteTheCookies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 07 Oct 2024 22:50:14 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/vigneswar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MovieReviewApp</title>
      <link>http://localhost:1313/writeups/ironctf2024/moviereviewapp/</link>
      <pubDate>Mon, 07 Oct 2024 22:50:14 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/ironctf2024/moviereviewapp/</guid>
      <description>MovieReviewApp Description: Last web challenge done in the ctf (unfortunately) also one of the fastest to do if you know the right tools
Introduction The challenge looks like a very simple site in pure html where we see reviews on movies
Source Is not present the source BUT&amp;hellip;
Solution The first thing that stands out is that in the URL there are extensions, so we understand that probably the system behind it is not very complex, in fact, going to the root endpoint we notice</description>
    </item>
    
    <item>
      <title>Loan App</title>
      <link>http://localhost:1313/writeups/ironctf2024/loan_app/</link>
      <pubDate>Sun, 06 Oct 2024 14:41:13 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/ironctf2024/loan_app/</guid>
      <description>Loan app Description: One of the first web challenges solved in ctf, not very complex (at least the unintended solution)
Introduction This is the challenge web with the most solutions, which I must say is very nice, my solution is the unintended but also the most common one, in fact the correct approach would have been to do &amp;lsquo;request smuggling&amp;rsquo;, which is a much more complex attack to bypass the proxy, which in this case consists of splitting a request between proxy and backend.</description>
    </item>
    
  </channel>
</rss>