<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ByteTheCookies</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on ByteTheCookies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Apr 2025 18:05:04 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Telemetry</title>
      <link>http://localhost:1313/writeups/ulisse2025/telemetry/</link>
      <pubDate>Tue, 08 Apr 2025 18:05:04 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/ulisse2025/telemetry/</guid>
      <description>Telemetry Description: Elia has just developed a brand-new website to analyze logs at runtime üßª. Confident in his security skills, he bet his entire house that you won&amp;rsquo;t find the hidden flag&amp;hellip; Will you prove him wrong? üè†üîç
Introduction Fourth round of the Cybercup 2025 ulisseCTF I want to show the writeup of the first web, a really interesting challenge.
Source The application is a simple Flask app with 0 css (we almost like it).</description>
    </item>
    
    <item>
      <title>Online Python Editor</title>
      <link>http://localhost:1313/writeups/trx2025/onlinepythoneditor/</link>
      <pubDate>Tue, 11 Mar 2025 18:12:32 +0100</pubDate>
      
      <guid>http://localhost:1313/writeups/trx2025/onlinepythoneditor/</guid>
      <description>Online Python Editor Description: If you&amp;rsquo;re tired of fast and good-looking editors, try this. Now with extra crispiness!
Introduction This is the first web in the TRX2025 CTF. And it&amp;rsquo;s basically a simple online Python editor with a syntax checker.
Source Go to the source code and we can immediately see two things:
In a file called secret.py, which is never called, read or otherwise used.
The main app.py file</description>
    </item>
    
    <item>
      <title>Ben 10</title>
      <link>http://localhost:1313/writeups/srdnlen2025/ben10/</link>
      <pubDate>Tue, 11 Mar 2025 16:52:02 +0100</pubDate>
      
      <guid>http://localhost:1313/writeups/srdnlen2025/ben10/</guid>
      <description>Ben 10 Description: Ben Tennyson&amp;rsquo;s Omnitrix holds a mysterious and powerful form called Materia Grigia ‚Äî a creature that only those with the sharpest minds can access. It&amp;rsquo;s hidden deep within the system, waiting for someone clever enough to unlock it. Only the smartest can access what‚Äôs truly hidden.
Can you outsmart the system and reveal the flag?
Introduction This is one of the webs of the 2025 italian championship cybercup first round, the ctf was made in january 2025, and I&amp;rsquo;m writing the writeups only so some information could be wrong or not complete.</description>
    </item>
    
    <item>
      <title>Locked Door</title>
      <link>http://localhost:1313/writeups/m0lecon2025beginner/lockeddoor/</link>
      <pubDate>Mon, 23 Dec 2024 16:55:16 +0100</pubDate>
      
      <guid>http://localhost:1313/writeups/m0lecon2025beginner/lockeddoor/</guid>
      <description>Locked Door Description: In front of you stands a door with a digital terminal. Will you be able to open it?
Introduction &amp;hellip;
Source &amp;hellip;
# filename: file.py &amp;hellip;
Solution &amp;hellip;
# filename: file.py $ flag: flag{redacted} Author: ... </description>
    </item>
    
    <item>
      <title>ImgPlace</title>
      <link>http://localhost:1313/writeups/m0lecon2025beginner/imgplace/</link>
      <pubDate>Mon, 23 Dec 2024 16:48:55 +0100</pubDate>
      
      <guid>http://localhost:1313/writeups/m0lecon2025beginner/imgplace/</guid>
      <description>ImgPlace Description: Are you a photographer but have no reputation? Join ImgPlace! Share your photos&amp;hellip; and become popular!
Introduction We have a very simple application where we are allowed to register and log in and then we can upload images via url and associated description
Source The source is only parsable by devtools from the browser, and we can see that in the pic.js file we have a function that sanitizes the image description</description>
    </item>
    
    <item>
      <title>MovieReviewApp</title>
      <link>http://localhost:1313/writeups/ironctf2024/moviereviewapp/</link>
      <pubDate>Mon, 07 Oct 2024 22:50:14 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/ironctf2024/moviereviewapp/</guid>
      <description>MovieReviewApp Description: Last web challenge done in the ctf (unfortunately) also one of the fastest to do if you know the right tools
Introduction The challenge looks like a very simple site in pure html where we see reviews on movies
Source Is not present the source BUT&amp;hellip;
Solution The first thing that stands out is that in the URL there are extensions, so we understand that probably the system behind it is not very complex, in fact, going to the root endpoint we notice</description>
    </item>
    
    <item>
      <title>b64SiteViewer</title>
      <link>http://localhost:1313/writeups/ironctf2024/b64siteviewer/</link>
      <pubDate>Mon, 07 Oct 2024 22:24:02 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/ironctf2024/b64siteviewer/</guid>
      <description>b64SiteViewer Description: This is one of the challenges added later, but despite that it wasn&amp;rsquo;t very complex, in fact the most complex part wasn&amp;rsquo;t even the web part, but despite that the challenge was still really nice
Introduction We are faced with a very simple application in which, given a url, the base64 of the page content is given back to us, plus there is a special endpoint that allows us to execute certain commands</description>
    </item>
    
    <item>
      <title>Loan App</title>
      <link>http://localhost:1313/writeups/ironctf2024/loan_app/</link>
      <pubDate>Sun, 06 Oct 2024 14:41:13 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/ironctf2024/loan_app/</guid>
      <description>Loan app Description: One of the first web challenges solved in ctf, not very complex (at least the unintended solution)
Introduction This is the challenge web with the most solutions, which I must say is very nice, my solution is the unintended but also the most common one, in fact the correct approach would have been to do &amp;lsquo;request smuggling&amp;rsquo;, which is a much more complex attack to bypass the proxy, which in this case consists of splitting a request between proxy and backend.</description>
    </item>
    
    <item>
      <title>Feature Unlocked</title>
      <link>http://localhost:1313/writeups/cyberspace2024/feature_unlocked/</link>
      <pubDate>Mon, 02 Sep 2024 10:59:31 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/cyberspace2024/feature_unlocked/</guid>
      <description>Feature unlocked Description: The world&amp;rsquo;s coolest app has a brand new feature! Too bad it&amp;rsquo;s not released until after the CTF..
Link: https://feature-unlocked-web-challs.csc.tf/
Introduction Feature unlocked is part of the first wave of the web and is one of the first challanges I solved. Made by cryptocat, who we salute, it is a fairly simple challange if you read the code correctly.
Source # filename: main.py import subprocess import base64 import json import time import requests import os from flask import Flask, request, render_template, make_response, redirect, url_for from Crypto.</description>
    </item>
    
    <item>
      <title>ZipZone</title>
      <link>http://localhost:1313/writeups/cyberspace2024/zipzone/</link>
      <pubDate>Mon, 02 Sep 2024 10:59:17 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/cyberspace2024/zipzone/</guid>
      <description>Zipzone Description: I was tired of trying to find a good file server for zip files, so I made my own! It&amp;rsquo;s still a work in progress, but I think it&amp;rsquo;s pretty good so far.
Link: https://zipzone-web.challs.csc.tf/
Introduction ZipZone is the only one web in the beginner&amp;rsquo;s category and, as the title suggests, you have to upload zip files that will be unzipped later, so you have to download the extracted files afterwards.</description>
    </item>
    
    <item>
      <title>Miku vs. Machine</title>
      <link>http://localhost:1313/writeups/sekaictf2024/mikuvsmachine/</link>
      <pubDate>Mon, 26 Aug 2024 17:04:29 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/sekaictf2024/mikuvsmachine/</guid>
      <description>Miku vs. Machine Description: Time limit is 2 seconds for this challenge.
Official resources of challenge
Introduction The goal is to distribute the hours of n singers in m shows. Each show has a number of hours equal to l (unknown) and can only change singers once. We also want that each singer will have the same time on stage.
Solution To solve this problem, I use a greedy strategy that iteratively divides the available singing time among the singers, ensuring that each singer fulfills their required hours.</description>
    </item>
    
    <item>
      <title>Some Trick</title>
      <link>http://localhost:1313/writeups/sekaictf2024/sometrick/</link>
      <pubDate>Mon, 26 Aug 2024 17:04:19 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/sekaictf2024/sometrick/</guid>
      <description>Some Trick Description: Bob and Alice found a futuristic version of opunssl and replaced all their needs for doofy wellmen.
Introduction Some Trick was the first cryptography challenge in the 2024 edition of SekaiCTF. The challenge implements a key exchange based on a set of permutations and asks us to retrieve the flag that was used as a key in Bob&amp;rsquo;s first encryption.
import random from secrets import randbelow, randbits from flag import FLAG CIPHER_SUITE = randbelow(2**256) print(f&amp;quot;oPUN_SASS_SASS_l version 4.</description>
    </item>
    
    <item>
      <title>Kirbytime</title>
      <link>http://localhost:1313/writeups/litctf2024/kirbytime/</link>
      <pubDate>Tue, 13 Aug 2024 13:01:07 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/litctf2024/kirbytime/</guid>
      <description>Kirbytime Description: Welcome to Kirby&amp;rsquo;s Website.
Introduction We find ourselves in front of a very pink Kirby-themed page, where we are asked to enter a password of 7 characters.
Source # filename: main.py import sqlite3 from flask import Flask, request, redirect, render_template import time app = Flask(__name__) @app.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;]) def login(): message = None if request.method == &#39;POST&#39;: password = request.form[&#39;password&#39;] real = &#39;REDACTED&#39; if len(password) != 7: return render_template(&#39;login.</description>
    </item>
    
    <item>
      <title>File Sharing Portal</title>
      <link>http://localhost:1313/writeups/noobzctf2024/filesharingportal/</link>
      <pubDate>Tue, 06 Aug 2024 11:27:07 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/noobzctf2024/filesharingportal/</guid>
      <description>File Sharing Portal Description: Welcome to the file sharing portal! We only support tar files!
Introduction The ctf has a very simple structure: we have a form in which we are asked to insert a tar file; once the tar file has been inserted, it is unzipped and we are shown the name of files it contains; by clicking on the different files, we can read their contents.
Source The source has comments added later to allow a better understanding of the code in the writeups</description>
    </item>
    
    <item>
      <title>WaaS</title>
      <link>http://localhost:1313/writeups/noobzctf2024/waas/</link>
      <pubDate>Tue, 06 Aug 2024 11:27:07 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/noobzctf2024/waas/</guid>
      <description>Waas Description: Writing as a Service!
Introduction WaaS (Writing as a Service) allows us to overwrite a file on the system (after some input validation) and insert anything (until a newline is met) we want in it.
import subprocess from base64 import b64decode as d while True: print(&amp;quot;[1] Write to a file\n[2] Get the flag\n[3] Exit&amp;quot;) try: inp = int(input(&amp;quot;Choice: &amp;quot;).strip()) except: print(&amp;quot;Invalid input!&amp;quot;) exit(0) if inp == 1: file = input(&amp;quot;Enter file name: &amp;quot;).</description>
    </item>
    
  </channel>
</rss>